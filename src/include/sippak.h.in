/**
 * sippak -- SIP command line utility.
 * Copyright (C) 2018, Stas Kobzar <staskobzar@modulis.ca>
 *
 * This file is part of sippak.
 *
 * sippak is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * sippak is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with sippak.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file sippak.h
 * @brief sippak core include file
 */
#include <pjsip.h>
#include <pjlib.h>

#ifndef __SIPPAK_H
#define __SIPPAK_H

#define PROJECT_NAME      "@PROJECT_NAME@"
#define PROJECT_VERSION   "@sippak_VERSION@"
#define PROJECT_URL       "@PROJECT_URL@"
#define PROJECT_AUTHOR    "@PROJECT_AUTHOR@"
#define PJSIP_VERSION     "@PJSIP_VERSION@"
#define PROJECT_BUILTTIME "@PROJECT_BUILTTIME@"
#define PROJECT_ARCH      "@CMAKE_SYSTEM_PROCESSOR@"
#define LICENSE           "GPLv3"

#define POOL_INIT 1024
#define POOL_INCR 1024

#define MAX_NS_COUNT 3 // must be less then PJ_DNS_RESOLVER_MAX_NS, 16
#define MIN_LOG_LEVEL 3 // minimum verbosity level

#define MAX_LEN_PRES_NOTE 64 // max length of presece note message

enum app_command {

  CMD_UNKNOWN = 0x100,
  CMD_HELP,
  CMD_VERSION,
  CMD_PING,
  CMD_PUBLISH,
  CMD_SUBSCRIBE

} app_command;

typedef enum {

  EVTYPE_PRES = 0x200,
  EVTYPE_MWI

} sippak_pres_evtype;

struct sippak_app {
  pjsip_endpoint *endpt;
  pj_pool_t *pool;

  struct {

    enum app_command cmd;         /*<! Command ID. Default CMD_PING */

    int log_level;                /*<! Log level. Default MIN_LOG_LEVEL */
    unsigned log_decor;           /*<! Log decoration: color, indent, time etc. */
    pj_bool_t trail_dot;          /*<! Display trailing dot at the end of SIP message line. */

    pj_str_t dest;                /*<! Destination R-URI */
    char *nameservers;            /*<! Comma separated list of DNS servers. */
    pj_uint16_t local_port;       /*<! Bind local port. */

    pj_str_t local_host;          /*<! Bind local IP/host. */
    pj_str_t username;            /*<! Username in Contact/From header and for auth. */
    pj_str_t password;            /*<! Authentication password. */
    pj_str_t from_name;           /*<! Display name in From header. */
    pjsip_transport_type_e proto; /*<! Transport protocol type: udp, tcp etc. */
    unsigned int expires;         /*<! Set Expires header value */

    pj_bool_t pres_status_open;   /*<! Presence status */
    pj_str_t pres_note;           /*<! Presence note message */
    pj_bool_t pres_use_xpidf;     /*<! Use xpidf type instead of pidf */
    sippak_pres_evtype pres_ev;   /*<! Presence event type for subscribe. */

  } cfg;

};

pj_status_t sippak_mod_logger_register(struct sippak_app *app);
pj_status_t sippak_set_resolver_ns(struct sippak_app *app);

pj_status_t sippak_cmd_ping(struct sippak_app *app);
pj_status_t sippak_cmd_publish(struct sippak_app *app);
pj_status_t sippak_cmd_subscribe (struct sippak_app *app);

pj_status_t sippak_getopts(int argc, char *argv[], struct sippak_app *app);

pj_status_t sippak_init (struct sippak_app *app);
void sippak_loop_cancel();
void usage ();
void version ();

/* sip helper function */
pj_str_t sippak_create_from_hdr(struct sippak_app *app);
pj_str_t sippak_create_ruri(struct sippak_app *app);
pj_str_t sippak_create_contact_hdr(struct sippak_app *app,
                                pj_str_t *local_addr,
                                int local_port);

pj_status_t sippak_transport_init(struct sippak_app *app,
                                  pj_str_t **local_addr,
                                  int *local_port);

void sippak_set_cred(struct sippak_app *app, pjsip_cred_info *cred);

/**
 * Get name servers and ports list and store in "ns" and "ports" arrays.
 * If "nameservers" argument is NULL, will try to get system nameserves
 * using "resolv" library. First argument, "nameservers", should contain
 * string of servers (and ports, optionally) of the form:
 * "8.8.8.8,127.0.0.1" or "8.8.4.1:553" or "8.8.4.4,6.6.6.1:887"
 *
 * @param app      sippak main application structure.
 * @param ns       Array where servers will by stored as pj_str_t
 * @param ports    Array of ports corresponding to the servers. Default 53.
 *
 * @return              Number of found servers or 0.
 */
int sippak_get_ns_list (struct sippak_app *app, pj_str_t *ns, pj_uint16_t *ports);

#endif
